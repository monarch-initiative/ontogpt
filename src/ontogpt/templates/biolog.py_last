from __future__ import annotations 

import re
import sys
from datetime import (
    date,
    datetime,
    time
)
from decimal import Decimal 
from enum import Enum 
from typing import (
    Any,
    ClassVar,
    Dict,
    List,
    Literal,
    Optional,
    Union
)

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    field_validator
)


metamodel_version = "None"
version = "0.1.0"


class ConfiguredBaseModel(BaseModel):
    model_config = ConfigDict(
        validate_assignment = True,
        validate_default = True,
        extra = "forbid",
        arbitrary_types_allowed = True,
        use_enum_values = True,
        strict = False,
    )
    pass




class LinkMLMeta(RootModel):
    root: Dict[str, Any] = {}
    model_config = ConfigDict(frozen=True)

    def __getattr__(self, key:str):
        return getattr(self.root, key)

    def __getitem__(self, key:str):
        return self.root[key]

    def __setitem__(self, key:str, value):
        self.root[key] = value

    def __contains__(self, key:str) -> bool:
        return key in self.root


linkml_meta = LinkMLMeta({'default_prefix': 'paperex',
     'default_range': 'string',
     'description': 'Schema for extracting structured data from papers, including '
                    'Biolog Phenotype MicroArray experiments.',
     'id': 'https://example.org/PaperExtractionSchema',
     'imports': ['linkml:types'],
     'license': 'https://creativecommons.org/publicdomain/zero/1.0/',
     'name': 'PaperExtractionSchema',
     'prefixes': {'linkml': {'prefix_prefix': 'linkml',
                             'prefix_reference': 'https://w3id.org/linkml/'},
                  'paperex': {'prefix_prefix': 'paperex',
                              'prefix_reference': 'https://example.org/PaperExtractionSchema/'},
                  'rdf': {'prefix_prefix': 'rdf',
                          'prefix_reference': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#'}},
     'source_file': '/Users/marcin/Documents/VIMSS/ontology/LLMs/ontogpt/src/ontogpt/templates/biolog.yaml',
     'title': 'Paper Extraction Schema'} )

class FlexibleBooleanEnum(str, Enum):
    """
    Minimal enumeration for capturing yes/no/true/false in lowercase, plus 'not provided' if data are missing or ambiguous

    """
    yes = "yes"
    no = "no"
    true = "true"
    false = "false"
    not_provided = "not provided"



class NamedEntity(ConfiguredBaseModel):
    """
    A generic named entity for all non-root classes.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://example.org/PaperExtractionSchema'})

    pass


class Paper(ConfiguredBaseModel):
    """
    A single paper or study.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://example.org/PaperExtractionSchema', 'tree_root': True})

    study_title: str = Field(default=..., description="""The paper's title.""", json_schema_extra = { "linkml_meta": {'alias': 'study_title',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': "Extract the paper's title from the "
                                             'text. \n'
                                             'If no title is found, return "Not '
                                             'provided".\n'}},
         'domain_of': ['Paper']} })
    authors: List[Author] = Field(default=..., description="""Authors of the paper.""", json_schema_extra = { "linkml_meta": {'alias': 'authors',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'Provide a YAML list of authors under the '
                                             'key `authors:`.\n'
                                             'Example:\n'
                                             '\n'
                                             '    authors:\n'
                                             '      - name: "Olga V. Mavrodi"\n'
                                             '      - name: "Janiece R. McWilliams"\n'
                                             '\n'
                                             'If no authors are found, return an '
                                             '*empty* list:\n'
                                             '\n'
                                             '    authors: []\n'
                                             '\n'
                                             '(Avoid leaving `authors:` blank with no '
                                             'list or value.)\n'}},
         'domain_of': ['Paper']} })
    doi: Optional[str] = Field(default=None, description="""DOI of the publication.""", json_schema_extra = { "linkml_meta": {'alias': 'doi',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'Extract the DOI if available. If not '
                                             "found, use 'Not provided'.\n"}},
         'domain_of': ['Paper']} })
    date: Optional[str] = Field(default=None, description="""Publication date.""", json_schema_extra = { "linkml_meta": {'alias': 'date',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'Extract the publication date. If not '
                                             "specified, 'Not provided'.\n"}},
         'domain_of': ['Paper']} })
    experiments: List[Experiment] = Field(default=..., description="""Experiments (e.g. Biolog Phenotype MicroArray) included in the paper.""", json_schema_extra = { "linkml_meta": {'alias': 'experiments',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'Summarize each distinct experiment under '
                                             '`experiments:`\n'
                                             'with a YAML list. For example:\n'
                                             '\n'
                                             '    experiments:\n'
                                             '      - experiment_motivation: '
                                             '"Screening with Biolog..."\n'
                                             '        ...\n'
                                             '      - experiment_motivation: "RNA-seq '
                                             'profiling..."\n'
                                             '        ...\n'
                                             '\n'
                                             'If none are found, return an empty '
                                             'list:\n'
                                             '\n'
                                             '    experiments: []\n'
                                             '\n'
                                             '(Do not leave it blank.)\n'}},
         'domain_of': ['Paper']} })


class Author(NamedEntity):
    """
    An author of the paper.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://example.org/PaperExtractionSchema'})

    name: str = Field(default=..., description="""Name of the author.""", json_schema_extra = { "linkml_meta": {'alias': 'name',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'Extract the full name of this author. If '
                                             "none, 'Not provided'."}},
         'domain_of': ['Author']} })


class Experiment(NamedEntity):
    """
    A single experiment from the paper.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://example.org/PaperExtractionSchema'})

    experiment_motivation: Optional[str] = Field(default=None, description="""Rationale for the experiment.""", json_schema_extra = { "linkml_meta": {'alias': 'experiment_motivation',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'Describe the purpose or reason for doing '
                                             'this experiment.'}},
         'domain_of': ['Experiment']} })
    experiment_design: Optional[str] = Field(default=None, description="""Summary of how the experiment was designed.""", json_schema_extra = { "linkml_meta": {'alias': 'experiment_design',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'Summarize the experimental design or '
                                             'approach.'}},
         'domain_of': ['Experiment']} })
    environment: Optional[str] = Field(default=None, description="""Location or conditions in which the experiment occurred (lab, greenhouse, etc.).""", json_schema_extra = { "linkml_meta": {'alias': 'environment',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'Extract any mention of environment or '
                                             "setting. If none, 'Not provided'."}},
         'domain_of': ['Experiment']} })
    host: Optional[List[Host]] = Field(default=None, description="""One or more hosts in the experiment (e.g., a plant).""", json_schema_extra = { "linkml_meta": {'alias': 'host',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'Identify any host organisms used (like '
                                             'Brachypodium distachyon).'}},
         'domain_of': ['Experiment']} })
    host_type: Optional[str] = Field(default=None, description="""Type of host (e.g., plant, animal).""", json_schema_extra = { "linkml_meta": {'alias': 'host_type',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'Specify the host type (plant, animal, '
                                             "etc.). If not mentioned, 'Not "
                                             "provided'."}},
         'domain_of': ['Experiment']} })
    target_microbes: Optional[List[Microbe]] = Field(default=None, description="""Microbes targeted in the experiment.""", json_schema_extra = { "linkml_meta": {'alias': 'target_microbes',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': "List the microbe(s). If none, 'Not "
                                             "provided'."}},
         'domain_of': ['Experiment']} })
    biological_system: Optional[str] = Field(default=None, description="""Biological system under study.""", json_schema_extra = { "linkml_meta": {'alias': 'biological_system',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': "Extract e.g. 'rhizosphere' or 'root "
                                             "exudates system'. If missing, 'Not "
                                             "provided'."}},
         'domain_of': ['Experiment']} })
    conditions: Optional[str] = Field(default=None, description="""Experimental conditions (temperature, pH, etc.).""", json_schema_extra = { "linkml_meta": {'alias': 'conditions',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'Pull out relevant conditions. If absent, '
                                             "'Not provided'."}},
         'domain_of': ['Experiment']} })
    experimental_factors: Optional[List[ExperimentalFactor]] = Field(default=None, description="""Factors tested or measured (e.g., presence of root exudates, carbon sources).""", json_schema_extra = { "linkml_meta": {'alias': 'experimental_factors',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'List factors or treatments. If none, '
                                             "'Not provided'."}},
         'domain_of': ['Experiment']} })
    is_biolog_experiment: Optional[FlexibleBooleanEnum] = Field(default=None, description="""Whether the experiment is a Biolog experiment.""", json_schema_extra = { "linkml_meta": {'alias': 'is_biolog_experiment',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': "Indicate 'yes' or 'no' if explicitly "
                                             'stated. \n'
                                             "If not clear, use 'not provided'.\n"}},
         'domain_of': ['Experiment']} })
    type_of_biolog_experiment: Optional[str] = Field(default=None, description="""Type/subtype of the Biolog experiment.""", json_schema_extra = { "linkml_meta": {'alias': 'type_of_biolog_experiment',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'If it is a Biolog experiment, specify '
                                             "(e.g. 'Phenotype MicroArray').\n"
                                             "If absent, 'Not provided'.\n"}},
         'domain_of': ['Experiment']} })
    plates: Optional[List[str]] = Field(default=None, description="""Biolog plates used (e.g., PM01, PM02A).""", json_schema_extra = { "linkml_meta": {'alias': 'plates',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'Identify plate types like PM01, PM02A, '
                                             'EcoPlate, GEN III, etc.\n'
                                             "If none, 'Not provided'.\n"}},
         'domain_of': ['Experiment']} })
    replicates: Optional[str] = Field(default=None, description="""Number of replicates.""", json_schema_extra = { "linkml_meta": {'alias': 'replicates',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'Extract any mention of replicates. If '
                                             "none, 'Not provided'."}},
         'domain_of': ['Experiment']} })
    protocol_steps: Optional[List[str]] = Field(default=None, description="""Key steps in the experimental protocol.""", json_schema_extra = { "linkml_meta": {'alias': 'protocol_steps',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'List the main protocol steps. \n'
                                             "If none, 'Not provided'.\n"}},
         'domain_of': ['Experiment']} })
    plate_reader_types_of_data_collected: Optional[List[str]] = Field(default=None, description="""Data types collected (OD, formazan color, respiration, etc.).""", json_schema_extra = { "linkml_meta": {'alias': 'plate_reader_types_of_data_collected',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'Extract data types measured by plate '
                                             'reader or OmniLog. \n'
                                             "If none, 'Not provided'.\n"}},
         'domain_of': ['Experiment']} })
    od_protocol: Optional[str] = Field(default=None, description="""Protocol for measuring optical density.""", json_schema_extra = { "linkml_meta": {'alias': 'od_protocol',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'If relevant, describe OD measurement '
                                             "steps. If none, 'Not provided'.\n"}},
         'domain_of': ['Experiment']} })
    respiration_protocol: Optional[str] = Field(default=None, description="""Protocol for measuring respiration or metabolic activity.""", json_schema_extra = { "linkml_meta": {'alias': 'respiration_protocol',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'If formazan or respiration is mentioned, '
                                             "describe. Otherwise, 'Not provided'.\n"}},
         'domain_of': ['Experiment']} })
    instrument_used: Optional[List[str]] = Field(default=None, description="""Instrument or equipment used (e.g. OmniLog Phenotype MicroArray System).""", json_schema_extra = { "linkml_meta": {'alias': 'instrument_used',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': "If there's mention of an instrument "
                                             '(OmniLog, etc.), list it. \n'
                                             'If multiple are referenced, list them. \n'
                                             "If none, 'Not provided'.\n"}},
         'domain_of': ['Experiment']} })
    analysis_software: Optional[List[str]] = Field(default=None, description="""Software used to analyze or interpret data.""", json_schema_extra = { "linkml_meta": {'alias': 'analysis_software',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': "Extract any software used (e.g. 'OmniLog "
                                             "Parametric Analysis v1.20.02'). \n"
                                             "If none, 'Not provided'.\n"}},
         'domain_of': ['Experiment']} })
    incubation_temperature: Optional[str] = Field(default=None, description="""Temperature at which cultures/plates were incubated.""", json_schema_extra = { "linkml_meta": {'alias': 'incubation_temperature',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'If a temperature is mentioned, capture '
                                             "it; else, 'Not provided'."}},
         'domain_of': ['Experiment']} })
    incubation_duration: Optional[str] = Field(default=None, description="""Total incubation time for the experiment.""", json_schema_extra = { "linkml_meta": {'alias': 'incubation_duration',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'If a time is given (48h, etc.), record '
                                             "it; else, 'Not provided'."}},
         'domain_of': ['Experiment']} })


class Host(NamedEntity):
    """
    A host organism or system.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://example.org/PaperExtractionSchema'})

    placeholder_attribute: Optional[str] = Field(default=None, description="""Placeholder attribute for Host.""", json_schema_extra = { "linkml_meta": {'alias': 'placeholder_attribute',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'Extract details about this host. If '
                                             "none, 'Not provided'."}},
         'domain_of': ['Host', 'Microbe', 'ExperimentalFactor']} })


class Microbe(NamedEntity):
    """
    Information about a microbial species or strain.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://example.org/PaperExtractionSchema'})

    placeholder_attribute: Optional[str] = Field(default=None, description="""Placeholder attribute for Microbe.""", json_schema_extra = { "linkml_meta": {'alias': 'placeholder_attribute',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'Extract details about this microbe. If '
                                             "none, 'Not provided'."}},
         'domain_of': ['Host', 'Microbe', 'ExperimentalFactor']} })


class ExperimentalFactor(NamedEntity):
    """
    A factor manipulated or measured in an experiment.
    """
    linkml_meta: ClassVar[LinkMLMeta] = LinkMLMeta({'from_schema': 'https://example.org/PaperExtractionSchema'})

    placeholder_attribute: Optional[str] = Field(default=None, description="""Placeholder attribute for ExperimentalFactor.""", json_schema_extra = { "linkml_meta": {'alias': 'placeholder_attribute',
         'annotations': {'prompt': {'tag': 'prompt',
                                    'value': 'Extract details about any factor (e.g. '
                                             'carbon source, exudate presence).\n'
                                             "If absent, 'Not provided'.\n"}},
         'domain_of': ['Host', 'Microbe', 'ExperimentalFactor']} })


# Model rebuild
# see https://pydantic-docs.helpmanual.io/usage/models/#rebuilding-a-model
NamedEntity.model_rebuild()
Paper.model_rebuild()
Author.model_rebuild()
Experiment.model_rebuild()
Host.model_rebuild()
Microbe.model_rebuild()
ExperimentalFactor.model_rebuild()
